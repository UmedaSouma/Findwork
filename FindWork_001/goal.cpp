//===========================================================================================================================================================
// 
// ゴールのモデルとゴール処理 [goal.cpp]
// Author : souma umeda
// 
//===========================================================================================================================================================
#include "goal.h"
#include "search.h"
#include "collision.h"
#include "manager.h"

std::vector<int> g_aa;

//========================================================================================================================
// コンストラクタ
//========================================================================================================================
CGoal::CGoal(int nPrio) :CModel(nPrio), 
	m_runtype(RUN_NONE)
{
	m_bF = false;
	m_bL = false;
	g_aa.clear();
}

//========================================================================================================================
// デストラクタ
//========================================================================================================================
CGoal::~CGoal()
{
}

//========================================================================================================================
// 初期設定
//========================================================================================================================
HRESULT CGoal::Init()
{
	SetModel("data\\MODEL\\goal.x");
	SetPos({ 200,0,0 });


	SetScale(GetScale() * 1.2f);

	CModel::Init();

	SetType(GOAL);

	return S_OK;
}

//========================================================================================================================
// 終了処理
//========================================================================================================================
void CGoal::Uninit()
{
	CModel::Uninit();
}

//========================================================================================================================
// 更新処理
//========================================================================================================================
void CGoal::Update()
{
	CCarPlayer* pPlayer = nullptr;
	pPlayer = CSearch::SearchObject(pPlayer, CObject::CAR_PLAYER);

	if (pPlayer == nullptr)
	{ return; }

	D3DXVECTOR3 Fpos = GetPos();
	D3DXVECTOR3 Lpos = GetPos();
	D3DXVECTOR3 size = { 500.0f,500.0f,50.0f };
	Fpos.z -= 300.0f;
	Lpos.z -= 0.0f;
	
	if (CCollision::BoxTrigger(Fpos, size, pPlayer->GetPos(), pPlayer->GetSize()))
	{
		g_aa.push_back(1);

		/*RUNTYPE runtype = RUN_NONE;
		runtype = CollisionGoalPlayer(pPlayer);

		switch (runtype)
		{
		case RUN_BACK:

			break;

		case RUN_FRONT:
		case RUN_NONE:

			CFade* pFade = CManager::GetFade();
			pFade->SetFade(CScene::MODE_RESULT);

			break;
		}	*/
	}

	if (CCollision::BoxTrigger(Lpos, size, pPlayer->GetPos(), pPlayer->GetSize()))
	{
		g_aa.push_back(2);
	}

	int bb = 0;
	int b = 0;
	int i = 0;
	for (auto itr = g_aa.rbegin(); itr != g_aa.rend(); ++itr)
	{
		if (i == 0)
		{
			bb = *itr;
		}
		if (i == 1)
		{
			b = *itr;
		}
		i++;
	}

	if (bb == 2 && b == 1)
	{
		CFade* pFade = CManager::GetFade();
		pFade->SetFade(CScene::MODE_RESULT);
	}


	CModel::Update();
}

//========================================================================================================================
// 描画処理
//========================================================================================================================
void CGoal::Draw()
{
	CModel::Draw();
}

//========================================================================================================================
// ゴールとプレイヤーの当たり判定
//========================================================================================================================
CGoal::RUNTYPE CGoal::CollisionGoalPlayer(CCarPlayer* pPlayer)
{
	D3DXVECTOR3 oldpos = pPlayer->GetOldPos();
	RUNTYPE runtype = RUN_NONE;

	if (oldpos.z > pPlayer->GetPos().z)
	{
		runtype = RUN_BACK;
	}
	else if (oldpos.z < pPlayer->GetPos().z)
	{
		runtype = RUN_FRONT;
	}

	return runtype;
}

//========================================================================================================================
// 生成処理
//========================================================================================================================
CGoal* CGoal::Create()
{
	CGoal* pGoal = new CGoal;
	pGoal->Init();

	return pGoal;
}